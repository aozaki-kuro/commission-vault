import fs from 'fs'
import path from 'path'
import { commissionData } from '../data/commissionData'

const outputFilePath = path.join(__dirname, '../data/imageImports.ts')

// 生成唯一的导入名称
const generateUniqueImportName = (baseName: string, importNames: Map<string, number>): string => {
  let importName = `A${baseName}`
  if (importNames.has(importName)) {
    const count = importNames.get(importName) || 0
    const suffix = String.fromCharCode(65 + count) // 生成后缀 A, B, C...
    importName += suffix
    importNames.set(`A${baseName}`, count + 1) // 更新后缀计数
  } else {
    importNames.set(importName, 0) // 初始计数为0
  }
  return importName
}

// 处理单个 commission 项，生成导入和映射语句
const processCommission = (
  commission: { fileName: string },
  importNames: Map<string, number>,
  importStatements: string[],
  exportMappings: string[],
) => {
  const baseName = commission.fileName.split('_')[0]
  const importName = generateUniqueImportName(baseName, importNames)

  const sanitizedFileName = commission.fileName.replace(/'/g, "\\'")
  importStatements.push(`import ${importName} from '#images/webp/${sanitizedFileName}.webp'`)

  const key = commission.fileName.includes("'")
    ? `"${commission.fileName}"`
    : `'${commission.fileName}'`
  exportMappings.push(`  ${key}: ${importName},`)
}

const generateImports = () => {
  const importNames = new Map<string, number>()
  const importStatements: string[] = []
  const exportMappings: string[] = []

  commissionData.forEach(characterData => {
    characterData.Commissions.forEach(commission => {
      processCommission(commission, importNames, importStatements, exportMappings)
    })
  })

  // 文件内容生成
  const fileContent = `// This file is auto-generated by the script at script/generateImageImports.ts
// !!! DO NOT EDIT !!!

${importStatements.join('\n')}

export const imageImports = {
${exportMappings.join('\n')}
}
`

  // 写入文件
  fs.writeFileSync(outputFilePath, fileContent, 'utf-8')
  console.log(`Image imports generated and saved to ${outputFilePath}`)
}

generateImports()
