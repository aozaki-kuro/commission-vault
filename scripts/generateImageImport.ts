import fs from 'fs'
import path from 'path'
import { commissionData } from '../data/commissionData'

const outputFilePath = path.join(__dirname, '../data/imageImports.ts')

const generateImports = () => {
  // 准备写入文件的字符串
  let fileContent = `// This file is auto-generated by the script at script/generateImageImports.ts\n// !!! DO NOT EDIT !!!\n\n`

  const importNames: string[] = []

  commissionData.forEach(characterData => {
    characterData.Commissions.forEach(commission => {
      // 仅保留文件名中 `_` 之前的部分，并将其转换为导入名称
      const fileNamePrefix = commission.fileName.split('_')[0]
      const importName = `A${fileNamePrefix}`

      // 避免重复导入
      if (!importNames.includes(importName)) {
        importNames.push(importName)

        // 将文件名中的单引号转义
        const sanitizedFileName = commission.fileName.replace(/'/g, "\\'")

        // 写入 import 语句，不使用末尾的分号
        fileContent += `import ${importName} from '#images/webp/${sanitizedFileName}.webp'\n`
      }
    })
  })

  // 写入导出对象
  fileContent += `\nexport const imageImports = {\n`

  commissionData.forEach(characterData => {
    characterData.Commissions.forEach(commission => {
      const fileNamePrefix = commission.fileName.split('_')[0]
      const importName = `A${fileNamePrefix}`

      // 如果文件名中包含单引号，则使用双引号包围
      const key = commission.fileName.includes("'")
        ? `"${commission.fileName}"`
        : `'${commission.fileName}'`

      fileContent += `  ${key}: ${importName},\n`
    })
  })

  fileContent += `}\n`

  // 将生成的内容写入文件
  fs.writeFileSync(outputFilePath, fileContent, 'utf-8')
  console.log(`Image imports generated and saved to ${outputFilePath}`)
}

generateImports()
