import { commissionData } from '#data/commissionData'
import fs from 'fs'
import path from 'path'

const OUTPUT_FILE_PATH = path.join(process.cwd(), 'data/imageImports.ts')

function getPartNumber(fileName: string): number {
  const match = fileName.match(/\(part (\d+)\)/)
  return match ? parseInt(match[1], 10) : 0
}

const fileGroups = new Map<string, { fileName: string }[]>()
for (const { Commissions } of commissionData) {
  for (const commission of Commissions) {
    const baseName = commission.fileName.split('_')[0]
    const group = fileGroups.get(baseName)
    if (group) group.push(commission)
    else fileGroups.set(baseName, [commission])
  }
}

const importItems: { fileName: string; importStmt: string; exportLine: string }[] = []

for (const files of fileGroups.values()) {
  if (files.length > 1) files.sort((a, b) => getPartNumber(a.fileName) - getPartNumber(b.fileName))
  const baseName = files[0].fileName.split('_')[0]
  files.forEach((file, i) => {
    const importName = `A${baseName}${files.length === 1 ? '' : String.fromCharCode(65 + i)}`
    const sanitized = file.fileName.replace(/'/g, "\\'")
    importItems.push({
      fileName: file.fileName,
      importStmt: `import ${importName} from '#images/webp/${sanitized}.webp'`,
      exportLine: `  '${file.fileName}': ${importName},`,
    })
  })
}

importItems.sort((a, b) => a.fileName.localeCompare(b.fileName))

const content = [
  '// This file is auto-generated by the script at script/generateImageImports.ts',
  '// !!! DO NOT EDIT !!!',
  ...importItems.map(item => item.importStmt),
  '',
  'export const imageImports = {',
  ...importItems.map(item => item.exportLine),
  '}',
  '',
].join('\n')

fs.writeFileSync(OUTPUT_FILE_PATH, content, 'utf-8')
